=> .NET é um framework, um ambiente de execução.
    - Consiste em 2 componentes:
        1 - CLR (Common language Runtime): A maquina virtual que executa toda a aplicação desenvolvida.
        2 - BCL (Base class Library): Uma biblioteca de codigos, compartilhada com todas as linguagens (C#,C++,J# e Basic .NET)
    
    - O .NET framework consiste em todo o conjunto de codigos de cada linguagem, a execução do compliador que pode executar, a biblioteca de classe, o CLR que vai interpretar toda a aplicação e interagir com o sistema operacional, e o funcionamento no sistema operacional.

=> IDE: Um ambiente de desenvolvimento integrado (IDE) é um software para criar aplicações que combina ferramentas comuns de desenvolvedor em uma única interface de usuário gráfica (GUI).


=> Link para verificação de modelo de aplicativo de console do C# gera instruções de nível superior (Para versões mais recentes)
	https://learn.microsoft.com/pt-br/dotnet/core/tutorials/top-level-templates

- Console.WriteLine -> Para imprimir na tela (A linha)

- Variável de referência -> É aquela que se refére ao local de armazenamento na memória, a qual já é utilizado por outra variável.
- Laços iterativos (Ou repetição) -> São estruturas que se repetem um bloco de códigos, determinado número de vezes
	- do ... while -> Executará o laço primeiro e depois irá verificar a condição. Ex.:(do{cont++;}while(cont<10);).
	- foreach -> Irá percorre todos os elementos de um conjunto. O contador será sempre o tamanho do conjunto.
- Laços condicionais -> Execução mediante uma condição/situação satisfeita.
- Switch ... case -> Só executa o caso em que a condição e satisfeita exatamente.
	- default: -> Será executado caso nenhuma das condições tenha sido satisfeitas

- Modificador de acessos ->São as definições de acessos do conteudo expecífico (Ex.: public, privete, protect e internal).
- Propriedade -> Define uma maneira de acessar atributos.
- Encapsular -> Proteger dados (Usando private, protect e internal).
- Polimorfismo -> O objeto tem mais de uma forma (Pode ser criado de várias formas. Ex.: Um animal do tipo cachorro. Animal a = new cachorro).
	- base -> Invoca o construtor da classe pai.
- Classe do tipo abstrata -> É um tipo de classe que não pode ser instanciada, irá servir apenas para outras classes herdarem seus atributos e métodos.
- Atributos ou método do tipo abstract -> Indica que a atributo ou método deverá ser implementada pela classe filha que estiver herdando essa atributo ou método.
- Override -> Vai sobescrever um valor em cima de outro herdado da classe pai.
- Virtual ->Permite que as classes filhas escolham se irá sobre escrever a propriedade ou não. (Obs.: Deve ser atribuida um valor inicial na criação).

- De boa prática ao se criar uma interface, adiciona-se um 'I' antes do nome da interface (ex.:IInterface).
- É importante a Interface ter a menor quantidade de funções possíveis, para que assim fique fácil de utiliza-la em varios ocasiões.
- DLL (Dynamic Link Library - Biblioteca de Link Dinâmica) -> pode ser entendida como um conjunto de dados (funções) acessíveis a várias aplicações, ao mesmo tempo ou não.
